This is a small package to work with lists in scheme. 
--------------------------------------------------------------------------------
1. nth

return the nth element of a list. To return the third element (n=3):

(nth 3 '(1 2 7 4 5 6)) ==>
7

2. last

last returns the last element of a list:

(last '(1 2 3 5)) ==>
5

3. neg-in-list?

searches in a list for negative numbers:

(neg-in-list? '(2 -2 4)) ==>
#t

(neg-in-list? '(2 2 4)) ==>
#f

4. sublist?

searches in a list for sublists:

(sublist? (list 1 2 3 45 (list -1 'k))) ==>
#t

(sublist? (list 1 2 3 45)) ==>
#f

5. list-sublists

returns all sublists in a list:

(list-sublists (list 1 2 (list 4 5 6 8) (list 5 6 66 0))) ==>
(4 5 6 8)
((5 6 66 0))

Some fixes must be done for the double parentheses in second sublist.

6. positive-car? - negative-car?

Nothing special: just check if the car of a list is positive or negative:

(negative-car? (list -1 2 3 5)) ==>
#t

(negative-car? (list 1 2 -3 5)) ==>
#f

(positive-car? (list -1 2 3 5)) ==>
#f

(positive-car? (list 1 2 3 -5))
#t

7. not-atom?

just the oposite of atom?

(not-atom? (list 1 2 3)) ==>
#t

(not-atom? 2) ==>
#f

--------------------------------------------------------------------------------
Todo:

1. Rewrite some of the procedures without using begin.

2. Improve neg-in-list? to work for sublists too.

More procedures will be added as soon as possible.

3. Improve list-sublists so that it doesn't print double parenetheses.

