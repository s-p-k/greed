================================================================================
scheme-utils - Brief scheme-utils documentation
================================================================================

  scheme-utils is a collection of scheme utils i write from time to time
  for educational purposes or when i want to write some code really
  fast. That's when scheme comes to the rescue. The scheme implementation
  of my choice is chicken.


================================================================================
0.0 Packages
================================================================================

The currently available packages are:

  * list-utils.scm
  * resistors.scm
  * math.scm

================================================================================
1. list-utils.scm
================================================================================

=============
1.0 swap-pair
=============

  swap-pair takes as input a pair and it returns it's elements swaped.

  > (swap-pair (cons 1 2))
  (2 . 1)

  > (swap-pair (cons 1 (list 1 2 3)))
  ((1 2 3) . 1)

=============
1.1 not-atom?
=============

  nothing special here: check if something is not an atom
  > (atom? 3)
  #t
  > (atom? (list 12 3))
  #f

=======
1.2 nth
=======

  return the nth element of a list. To return the third element (n=3):

  > (nth 3 '(1 2 7 4 5 6))
  7

========
1.3 last
========

  last returns the last element of a list:

  > (last '(1 2 3 5))
  5

=================
1.4 negative-car?
=================

  return true if the car of a list is negative.

  > (negative-car? (list -1 2 3)) #t > (negative-car? (list 1 2 3))
  #f

=================
1.5 positive-car?
=================

  return true if the car of a list is positive.

  > (positive-car? (list 1 2 3)) #t > (positive-car? (list -1 2 3))
  #f

================
1.6 neg-in-list?
================

  check if there's a negative number in a list.

  > (neg-in-list? (list 2 3))
  #f
  > (neg-in-list? (list 2 -3))
  #t

============
1.7 sublist?
============

  check if there's a sublist in a list.

  > (sublist? (list 1 2 3))
  #f
  > (sublist? (list 1 2 3 (list 2 3 5)))
  #t

=================
1.8 list-sublists
=================

  returns all the sublists in a list if there are any.

  > (list-sublists (list 1 2 3 (list 1 2)))
  ((1 2))
  > (list-sublists (list 1 2 3))
  no sublists exist

==============
1.9 exists-in?
==============

  check if an element exists in a list.

  > (exists-in? 5 (list 1 2 3))
  #f
  > (exists-in? 5 (list 1 2 3 5))
  #t

================================================================================
2 resistors.scm
================================================================================

  resistors.scm is a set of utilities that enables the user to convert
  from the color code of a resistance to the actual value in Ohms.
  resistors.scm needs list-utils.scm to function properly. Currently the
  package supports only three-band resistors. An example of what we can
  do whith this package:

========================
2.0 colors-to-resistance
========================

  > (colors-to-resistance (list "red" "blk" "red"))
  2000 Ohm, tolerace: 20%

================================================================================
3. math.scm
================================================================================

  math.scm is intended to be a package that has what the name says: some
  math utilities. I just started it, but i might add some more in the
  future. All that you can do right now is compute the sum of the
  geometric progression (geometric-series) of 1, 2, 4, 8 ...

=========================
3.0 geometric-progression
=========================

  > (geometric-progression 5 1)
  31

  What the above does is: (+ 1 2 4 8 16)

================================================================================
4. Future ideas
================================================================================

  Read the separate TODO file.
