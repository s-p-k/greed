This is a small package to work with lists in chicken scheme. 
--------------------------------------------------------------------------------
01 - nth
02 - last
03 - neg-in-list?
04 - sublist?
05 - list-sublists
06 - positive-car?, negative-car?
07 - not-atom?
08 - swap-pair?
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
01. nth
--------------------------------------------------------------------------------
return the nth element of a list. To return the third element (n=3):

(nth 3 '(1 2 7 4 5 6)) ==>
7

--------------------------------------------------------------------------------
02. last
--------------------------------------------------------------------------------
last returns the last element of a list:

(last '(1 2 3 5)) ==>
5

--------------------------------------------------------------------------------
03. neg-in-list?
--------------------------------------------------------------------------------
searches in a list for negative numbers:

(neg-in-list? '(2 -2 4)) ==>
#t

(neg-in-list? '(2 2 4)) ==>
#f

--------------------------------------------------------------------------------
04. sublist?
--------------------------------------------------------------------------------
searches in a list for sublists:

(sublist? (list 1 2 3 45 (list -1 'k))) ==>
#t

(sublist? (list 1 2 3 45)) ==>
#f

--------------------------------------------------------------------------------
05. list-sublists
--------------------------------------------------------------------------------
returns all sublists in a list:

(list-sublists (list 1 2 (list 4 5 6 8) (list 5 6 66 0))) ==>
(4 5 6 8)
(5 6 66 0)

06. positive-car? - negative-car?
--------------------------------------------------------------------------------
Nothing special: just check if the car of a list is positive or negative:

(negative-car? (list -1 2 3 5)) ==>
#t

(negative-car? (list 1 2 -3 5)) ==>
#f

(positive-car? (list -1 2 3 5)) ==>
#f

(positive-car? (list 1 2 3 -5))
#t

--------------------------------------------------------------------------------
07. not-atom?
--------------------------------------------------------------------------------
just the oposite of atom?

(not-atom? (list 1 2 3)) ==>
#t

(not-atom? 2) ==>
#f
-------------------------------------------------------------------------------
08. swap-pair
-------------------------------------------------------------------------------

swap the element of a cons

(swap-pair (cons 1 2)) ==>
(2 . 1)
-------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Todo:

01. Rewrite some of the procedures without using begin.

02. Improve neg-in-list? to work for sublists too. Improve error checking.

03. Write but-nth procedure to return all but the nth element of a list

04. Based on but-nth, write but-last.

05. Write count-sublists to find the number of sublists in a list.

06. Write a procedure to add car by car the elements of two lists, lst1 and lst2

07. Write a procedure to convert (list (list 1 2) (list 1 2 4) 4 5) to:

	 (list 1 2 1 2 4 4 5) (to-single-list lst)

08. Write a procedure that removes duplicates from a list.

